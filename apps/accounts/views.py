from rest_framework import generics, permissions, status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import login
from drf_spectacular.utils import extend_schema, OpenApiResponse, OpenApiExample

from .models import User

from .serializers import (
    UserRegistrationSerializer, 
    UserProfileSimpleSerializer,
    UserProfileSerializer,
    FarmProfileSerializer,
    LoginSerializer
)
from .permissions import IsOwnerOrReadOnly


class RegisterView(generics.CreateAPIView):
    """
    üîê Inscription des nouveaux pisciculteurs MAVECAM.
    
    Permet aux pisciculteurs de cr√©er un nouveau compte (individuel ou entreprise)
    et g√©n√®re automatiquement :
    - Un profil ferme associ√©
    - Des tokens JWT (access + refresh) pour l'authentification
    
    **Types de comptes support√©s :**
    - `individual` : Personne physique (first_name, last_name, age_group requis)
    - `company` : Entreprise (business_name, legal_status, promoter_name requis)
    
    **Validation automatique :**
    - Normalisation du num√©ro de t√©l√©phone (+237XXXXXXXXX)
    - V√©rification de l'unicit√© du t√©l√©phone
    - Validation des champs m√©tier selon le type de compte
    """
    queryset = User.objects.all()
    serializer_class = UserRegistrationSerializer
    permission_classes = [permissions.AllowAny]
    
    @extend_schema(
        summary="Inscription d'un nouveau pisciculteur",
        description="Cr√©e un compte utilisateur (individuel ou entreprise) avec g√©n√©ration automatique du profil ferme et des tokens JWT",
        examples=[
            OpenApiExample(
                'Personne physique',
                value={
                    "phone_number": "+237678901234",
                    "email": "jean.farmer@email.com",
                    "first_name": "Jean",
                    "last_name": "Farmer",
                    "account_type": "individual",
                    "age_group": "26_35",
                    "activity_type": "poisson_table",
                    "region": "littoral",
                    "password": "MotDePasse123",
                    "password_confirm": "MotDePasse123"
                },
                request_only=True
            ),
            OpenApiExample(
                'Entreprise',
                value={
                    "phone_number": "+237699887766",
                    "email": "contact@aquaferme.cm",
                    "business_name": "AquaFerme SARL",
                    "account_type": "company",
                    "legal_status": "sarl",
                    "promoter_name": "Marie Aquaculture",
                    "activity_type": "mixte",
                    "region": "centre",
                    "password": "EntrepriseSecure456",
                    "password_confirm": "EntrepriseSecure456"
                },
                request_only=True
            )
        ],
        responses={
            201: OpenApiResponse(description="Compte cr√©√© avec succ√®s"),
            400: OpenApiResponse(description="Erreurs de validation"),
        }
    )
    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        
        refresh = RefreshToken.for_user(user)
        
        return Response({
            'user': UserProfileSimpleSerializer(user).data,
            'tokens': {
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            },
            'message': 'Compte cr√©√© avec succ√®s'
        }, status=status.HTTP_201_CREATED)


class LoginView(APIView):
    """
    üîë Authentification flexible des pisciculteurs MAVECAM.
    
    Syst√®me de connexion supportant deux m√©thodes :
    1. **Nom d'affichage + mot de passe** (UX optimis√©e)
    2. **Num√©ro de t√©l√©phone + mot de passe** (fallback)
    
    **M√©thode 1 - Identifiants par nom :**
    - Personnes physiques : "Jean Farmer" (first_name + last_name)
    - Entreprises : "AquaFerme SARL" (business_name)
    
    **M√©thode 2 - Identifiants par t√©l√©phone :**
    - Format : "+237XXXXXXXXX" + mot de passe
    
    **R√©ponse :**
    - Profil utilisateur simplifi√©
    - Tokens JWT (access valide 15 min, refresh 7 jours)
    - Message de confirmation
    """
    permission_classes = [permissions.AllowAny]
    
    @extend_schema(
        summary="Connexion utilisateur MAVECAM",
        description="Authentification flexible avec deux m√©thodes : nom d'affichage OU num√©ro de t√©l√©phone + mot de passe",
        examples=[
            OpenApiExample(
                'Connexion personne physique par nom',
                value={
                    "login_name": "Jean Farmer",
                    "password": "MotDePasse123"
                },
                request_only=True
            ),
            OpenApiExample(
                'Connexion entreprise par nom',
                value={
                    "login_name": "AquaFerme SARL",
                    "password": "EntrepriseSecure456"
                },
                request_only=True
            ),
            OpenApiExample(
                'Connexion par num√©ro de t√©l√©phone',
                value={
                    "phone_number": "+237691234569",
                    "password": "MotDePasse123"
                },
                request_only=True
            )
        ],
        responses={
            200: OpenApiResponse(description="Connexion r√©ussie avec tokens JWT"),
            400: OpenApiResponse(description="Identifiants incorrects ou manquants"),
        }
    )
    def post(self, request):
        serializer = LoginSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        user = serializer.validated_data['user']
        login(request, user)
        
        refresh = RefreshToken.for_user(user)
        
        return Response({
            'user': UserProfileSimpleSerializer(user).data,
            'tokens': {
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            },
            'message': 'Connexion r√©ussie'
        })


class ProfileView(generics.RetrieveUpdateAPIView):
    """
    üë§ Gestion compl√®te du profil utilisateur MAVECAM.
    
    **GET :** R√©cup√®re le profil complet incluant :
    - Informations personnelles/entreprise
    - Donn√©es de localisation (r√©gion, d√©partement, etc.)
    - Profil ferme associ√© avec statut de certification
    - Propri√©t√©s calcul√©es (display_name, is_individual, etc.)
    
    **PUT/PATCH :** Modification des champs autoris√©s :
    - Informations contact (email, localisation)
    - Pr√©f√©rences (langue)
    - Zone d'intervention
    
    **Restrictions :**
    - phone_number : Non modifiable (identifiant unique)
    - certification_status : R√©serv√© aux admins MAVECAM
    """
    serializer_class = UserProfileSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwnerOrReadOnly]
    
    def get_object(self):
        return self.request.user


class FarmProfileView(generics.RetrieveUpdateAPIView):
    """
    üè° Gestion sp√©cialis√©e du profil ferme piscicole.
    
    **GET :** Consultation des informations techniques :
    - Infrastructure : nombre de bassins, superficie totale
    - Production : esp√®ces √©lev√©es, production annuelle
    - Ressources : source d'eau utilis√©e
    - Certification : statut g√©r√© par les admins MAVECAM
    
    **PUT/PATCH :** Modification des donn√©es techniques :
    - Informations sur les bassins et la superficie
    - D√©tails de production et esp√®ces
    - Source d'approvisionnement en eau
    
    **Restrictions :**
    - certification_status : Modification r√©serv√©e aux administrateurs
    - created_at/updated_at : Timestamps automatiques
    - id : UUID non modifiable pour la synchronisation mobile
    """
    serializer_class = FarmProfileSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_object(self):
        return self.request.user.farm_profile
